# quarkus.package.type=fast-jar

# ===== default (ブラウザログイン用) =====
# OIDC (web-app)
quarkus.oidc.auth-server-url=http://keycloak:8080/realms/demo-realm
quarkus.oidc.client-id=quarkus-client
quarkus.oidc.credentials.client-secret.value=VJEng5YQw6dBE5mf6x5R2tFvU0KMg3KB
quarkus.oidc.application-type=web-app
# quarkus.http.auth.permission.protected.paths=/hello
quarkus.http.auth.permission.protected.policy=authenticated
quarkus.http.proxy.proxy-address-forwarding=true

quarkus.http.auth.permission.api.paths=/mashup
quarkus.http.auth.permission.api.policy=authenticated

# ===== Bearer 専用テナント (svc) =====
# quarkus.oidc."svc".auth-server-url=http://keycloak:8080/realms/demo-realm
# quarkus.oidc."svc".client-id=quarkus-client
# quarkus.oidc."svc".application-type=service

# ===== Bearer 専用テナント (service) =====
quarkus.oidc."service".auth-server-url=http://keycloak:8080/realms/demo-realm
quarkus.oidc."service".client-id=quarkus-client
quarkus.oidc."service".application-type=service
# テナントをserviceで指定する場合は、以下コメントアウトを外してください。
# quarkus.oidc."service".tenant-paths=/mashup

# /mashup は Bearer で要認証
quarkus.http.auth.permission.mashup.paths=/mashup
quarkus.http.auth.permission.mashup.policy=authenticated

# Rest Client ベースURL（Docker サービス名）
quarkus.rest-client."service-a".url=http://service-a:8080
quarkus.rest-client."service-b".url=http://service-b:8080

# デバッグ
# quarkus.log.category."io.quarkus.oidc".level=DEBUG
# quarkus.log.category."org.jboss.resteasy.reactive.client".level=DEBUG

# OIDCの詳細ログ（集約側）
quarkus.log.category."io.quarkus.oidc".level=DEBUG
# quarkus.log.category."io.quarkus.oidc".level=TRACE


# RESTクライアントのログ（リクエスト/レスポンスを確認）
quarkus.rest-client.logging.scope=request-response
quarkus.rest-client.logging.body-limit=10240
quarkus.log.category."org.jboss.resteasy.reactive.client".level=DEBUG

# 自分のアプリのログ
quarkus.log.category."org.example".level=DEBUG




# ===== Redisでのセッション情報管理　=====

# --- Redis（デフォルトクライアントを使う）---
quarkus.redis.hosts=redis://redis:6379
# パスワードがある場合:
# quarkus.redis.password=${REDIS_PASSWORD}
# TLS の場合:
# quarkus.redis.tls.enabled=true
# quarkus.redis.hosts=rediss://redis:6379

# --- Cookie を小さく保つ（任意だが推奨）---
# quarkus.oidc.token-state-manager.strategy=id-refresh-tokens
# アクセストークンも含めて保持する
quarkus.oidc.token-state-manager.strategy=keep-all-tokens
# （Cookieサイズが気になるなら）
# quarkus.oidc.token-state-manager.split-tokens=true

# 複数 Pod でも安定（任意）：
quarkus.oidc.token-state-manager.encryption-secret=${OIDC_SESSION_SECRET}  # 32文字以上

# デフォルト（web-app テナント）用
# PKCE & state
quarkus.oidc.authentication.pkce-required=true
quarkus.oidc.authentication.state-secret=${STATE_SECRET:change-me-change-me-change-me-1234}
# （マルチテナントで個別に設定したい場合）
# quarkus.oidc."service".authentication.state-secret=...   # ※web-app のコードフローで使うテナントのみ


## セッションを滑らかに延長
# 期限切れ時にリフレッシュして継続
quarkus.oidc.token.refresh-expired=true
# セッション寿命の上乗せ（例：15分）※アプリの要件に合わせて
quarkus.oidc.authentication.session-age-extension=15M
# 失効直前に前倒し更新（例：30秒前）
quarkus.oidc.token.refresh-token-time-skew=30S

## Cookie・プロキシ配下の安全性
# 逆プロキシ(HTTPS終端)配下でも q_session 等を Secure に
# quarkus.oidc.authentication.cookie-force-secure=true
quarkus.oidc.authentication.cookie-force-secure=false
# SameSite は Lax が無難。クロスサイト要件があるなら要調整
quarkus.oidc.authentication.cookie-same-site=Lax

## 役割（@RolesAllowed）を使う予定があるなら
# ロールを access token から取得して検証
quarkus.oidc.roles.source=accesstoken

# /api/me の groups を埋めたい
quarkus.oidc.roles.role-claim-path=realm_access/roles


## Redis クライアントを分けたいとき
# OIDC セッション用に専用クライアントを指定
quarkus.oidc.redis-token-state-manager.redis-client-name=session
# その接続先は quarkus.redis.<name>.* で定義
quarkus.redis.session.hosts=redis://redis:6379
# quarkus.redis.session.password=...
# quarkus.redis.session.tls.enabled=true


# ===== 保護 ===== 
quarkus.http.auth.permission.authenticated.paths=/api/*
quarkus.http.auth.permission.authenticated.policy=authenticated

# ===== リダイレクト設定 ===== 
# OIDC コールバックは /login に固定（※ /app/ ではない）し、戻り先はコードで制御
quarkus.oidc.authentication.redirect-path=/login
# コールバック後は元URLに戻さず、/login リソース側で /app/ に送る
quarkus.oidc.authentication.restore-path-after-redirect=false

# ログアウト後の戻り先
quarkus.oidc.logout.path=/logout
quarkus.oidc.logout.post-logout-path=/app/


# ===== Cookie戦略（必要に応じて） ===== 
# cookie サイズ対策: トークン分割
# quarkus.oidc.token-state-manager.split-tokens=true
# HTTPS 環境では SameSite/Secure も検討
# quarkus.http.cookie.same-site=strict
# quarkus.http.insecure-requests=enabled



