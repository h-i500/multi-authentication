version: '3.8'

services:
  redis:
    image: redis:7-alpine
    command: ["redis-server", "--appendonly", "yes"]
    ports: ["6379:6379"]
    volumes:
      - ./data/redis:/data

  kong:
    image: kong:3.6.0
    environment:
      KONG_DATABASE: "off"   # ★ DB-LESS
      KONG_DECLARATIVE_CONFIG: /usr/local/kong/declarative/kong-deck.yaml  # ★ ファイルを指す
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_PLUGINS: bundled
      KONG_NGINX_HTTP_INCLUDE: /usr/local/kong/nginx-http.conf
    ports:
      - "8000:8000"
      - "8001:8001"
    command: ["kong", "docker-start"]
    volumes:
      # ★★★ ここが“ファイル→ファイル”になっていることが超重要 ★★★
      - ./kong/kong-deck.yaml:/usr/local/kong/declarative/kong-deck.yaml:ro
      - ./kong/kong-nginx-http.conf:/usr/local/kong/nginx-http.conf:ro

  kong-database:
    image: postgres:10
    environment:
      POSTGRES_USER: kong
      POSTGRES_DB: kong
      POSTGRES_PASSWORD: kong
    volumes:
      - kong_data:/var/lib/postgresql/data
      - ./init-konga-db.sql:/docker-entrypoint-initdb.d/init-konga-db.sql
  
  konga:
    image: pantsel/konga:latest
    container_name: konga
    restart: always
    environment:
      - NODE_ENV=development
      - DB_ADAPTER=postgres
      - DB_HOST=kong-database
      - DB_USER=kong
      - DB_PASSWORD=kong
      - DB_DATABASE=konga
    ports:
      - "1337:1337"
    depends_on:
      - kong-database

  keycloak:
    image: quay.io/keycloak/keycloak:24.0
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_HOSTNAME: keycloak
      KC_HOSTNAME_PORT: "8080"
      KC_HOSTNAME_STRICT: "false"
      KC_HOSTNAME_STRICT_HTTPS: "false"
      KC_HTTP_ENABLED: "true"
      KC_HTTP_PORT: "8080"
    ports: ["8080:8080"]
    volumes:
      - ./realms:/opt/keycloak/data/import:ro
    command:
      - start-dev
      - --import-realm
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:8080/health/ready >/dev/null || exit 1"]
      interval: 30s
      timeout: 3s
      retries: 10

  quarkus-authz:
    build:
      context: ./quarkus-authz
      dockerfile: Dockerfile
    environment:
      REDIS_HOST: redis
      QUARKUS_LOG_CATEGORY__IO_QUARKUS_OIDC__LEVEL: DEBUG
    depends_on:
      - keycloak
      - redis
    ports: ["8081:8080"]

  service-a:
    build:
      context: ./service-a
      dockerfile: Dockerfile
    environment:
      QUARKUS_OIDC_AUTH_SERVER_URL: http://keycloak:8080/realms/demo-realm
      QUARKUS_OIDC_CLIENT_ID: service-a
      QUARKUS_OIDC_APPLICATION_TYPE: service
      QUARKUS_HTTP_AUTH_PERMISSION_PROTECTED_PATHS: /a/*
      QUARKUS_HTTP_AUTH_PERMISSION_PROTECTED_POLICY: authenticated
      QUARKUS_OIDC_ROLES_SOURCE: accesstoken
      QUARKUS_OIDC_ROLES_ROLE_CLAIM_PATH: resource_access/service-b/roles
      QUARKUS_LOG_LEVEL: INFO
      QUARKUS_LOG_CATEGORY__IO_QUARKUS_OIDC__LEVEL: DEBUG
      QUARKUS_LOG_CATEGORY__IO_QUARKUS_SECURITY__LEVEL: DEBUG
    ports: ["9081:8080"]
    depends_on: [keycloak]

  service-b:
    build:
      context: ./service-b
      dockerfile: Dockerfile
    environment:
      QUARKUS_OIDC_AUTH_SERVER_URL: http://keycloak:8080/realms/demo-realm
      QUARKUS_OIDC_CLIENT_ID: service-b
      QUARKUS_OIDC_APPLICATION_TYPE: service
      QUARKUS_HTTP_AUTH_PERMISSION_PROTECTED_PATHS: /b/*
      QUARKUS_HTTP_AUTH_PERMISSION_PROTECTED_POLICY: authenticated
      QUARKUS_OIDC_ROLES_SOURCE: accesstoken
      QUARKUS_OIDC_ROLES_ROLE_CLAIM_PATH: resource_access/service-b/roles
      QUARKUS_LOG_LEVEL: INFO
      QUARKUS_LOG_CATEGORY__IO_QUARKUS_OIDC__LEVEL: DEBUG
      QUARKUS_LOG_CATEGORY__IO_QUARKUS_SECURITY__LEVEL: DEBUG
    ports: ["9082:8080"]
    depends_on: [keycloak]

  frontend:
    image: node:20-alpine
    working_dir: /app
    command: sh -c "npm ci && npm run dev -- --host 0.0.0.0 --port 5173"
    volumes:
      - ./frontend:/app
    ports: ["5173:5173"]
    environment:
      - CHOKIDAR_USEPOLLING=true
    restart: unless-stopped

volumes:
  kong_data: